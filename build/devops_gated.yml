name: $(BuildID)_$(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)
resources:
  repositories:
  - repository: self
    clean: true
  - repository: c_build_tools
    type: github
    name: azure/c-build-tools
    endpoint: github.com_azure
    ref: refs/heads/master

parameters:
  # GBALLOC_LL_TYPE_VALUES contains values from GBALLOC_LL_TYPE_VALUES of c-pal's CMakeLists.txt.
  # not all values listed in the CMakeLists need to be listed here - only those for which a completely separate build is done
  # GBALLOC_LL_TYPE_VALUES is an array of strings
  - name: GBALLOC_LL_TYPE_VALUES
    type: object
    default: ["PASSTHROUGH", "JEMALLOC"]

  # FSANITIZE_TYPE_VALUES are the same as cmakelists "fsanitize" option used to pass (or not) /fsanitize=address to the compiler.
  - name: FSANITIZE_TYPE_VALUES
    type: object
    default: ["ON", "OFF"]

  # ARCH_TYPE_VALUES exists merely for example for future extension capabilities
  # it provides the "walked path" of how to extend the pipeline with a completely different orthogonal parameter that can take an array of string of values
  - name: ARCH_TYPE_VALUES
    type: object
    #default: ["x64", "x86"]
    default: ["x64", "Win32"]

- ${{ each GBALLOC_LL_TYPE in parameters.GBALLOC_LL_TYPE_VALUES }}:
  - ${{ each FSANITIZE_TYPE in parameters.FSANITIZE_TYPE_VALUES }}:
    - ${{ each ARCH_TYPE in parameters.ARCH_TYPE_VALUES }}:
      # - ${{ if not( and( eq( GBALLOC_LL_TYPE , 'MIMALLOC' ), eq(FSANITIZE_TYPE, 'ON'))) }}: <==this fails to compile, reasons "2 parameters passed to if". The below line is equivalent.
      # there is no point in running mimalloc and fsanitize, so that combination is excluded from the whole build.
      - ${{ if or( ne( GBALLOC_LL_TYPE , 'JEMALLOC' ), ne(FSANITIZE_TYPE, 'ON')) }}:
        - template: /gated_jobs/build_and_run_tests.yml
          parameters:
            # BUILD_SUFFIX is the concatenation of all the parameters. It exists for every single template. Because all jobs/etc in a pipeline need to have different names. So a job name will end with ${{ parameters.BUILDSUFFIX }}
            BUILD_SUFFIX: _${{ GBALLOC_LL_TYPE }}_FSANITIZE_${{ FSANITIZE_TYPE }}_${{ ARCH_TYPE }}
            # passing the other parameters, each separated for easy consumption. The invoked template MUST have all these parameters listed.
            GBALLOC_LL_TYPE: ${{ GBALLOC_LL_TYPE }}
            FSANITIZE_TYPE: ${{ FSANITIZE_TYPE }}
            ARCH_TYPE: ${{ ARCH_TYPE }}

        -- template: /gated_jobs/build_and_run_tests.yml
          parameters:
            # BUILD_SUFFIX is the concatenation of all the parameters. It exists for every single template. Because all jobs/etc in a pipeline need to have different names. So a job name will end with ${{ parameters.BUILDSUFFIX }}
            BUILD_SUFFIX: _${{ GBALLOC_LL_TYPE }}_FSANITIZE_${{ FSANITIZE_TYPE }}_${{ ARCH_TYPE }}
            # passing the other parameters, each separated for easy consumption. The invoked template MUST have all these parameters listed.
            GBALLOC_LL_TYPE: ${{ GBALLOC_LL_TYPE }}
            configuration: "RelWithDebInfo"
            FSANITIZE_TYPE: ${{ FSANITIZE_TYPE }}
            ARCH_TYPE: ${{ ARCH_TYPE }}

- template: /pipeline_templates/codeql3000_default.yml@c_build_tools

- job: linuxubuntu
  displayName: 'Build Linux Ubuntu'
  pool:
    name: Azure-MsgStore-Linux2204BuildMachinePool
    demands:
      - linux

  steps:

  - bash: |
     pushd $(Build.Repository.LocalPath)
     git submodule update --init
     git submodule foreach --recursive "git clean -xdff"
     git clean -xdff
     popd
    workingDirectory: '$(Build.Repository.LocalPath)'
    displayName: 'git submodule update and clean'

  - task: Bash@3
    displayName: 'Build and run tests'
    inputs:
      targetType: filePath
      filePath: './build/linux/build_linux.sh'
      arguments: '$(Build.Repository.LocalPath)'
      workingDirectory: '$(Build.Repository.LocalPath)'

# Will be re-enabled at a later time
#- job: includecheck
#  pool:
#    name: Azure-MessagingStore
#    demands:
#    - Build
#    - Cmd
#    - msbuild
#    - cmake
#    - visualstudio
#
#  steps:
#  - task: BatchScript@1
#    displayName: 'Git submodule update'
#    inputs:
#      filename: 'C:\Program Files\Git\bin\git.exe'
#      arguments: 'submodule update --init --force'
#
#  - task: BatchScript@1
#    displayName: 'Git submodule clean'
#    inputs:
#      filename: 'C:\Program Files\Git\bin\git.exe'
#      arguments: 'submodule foreach --recursive "git clean -xdff"'
#
#  - task: BatchScript@1
#    displayName: 'Git clean'
#    inputs:
#      filename: 'C:\Program Files\Git\bin\git.exe'
#      arguments: 'clean -xdff'
#
#  - task: BatchScript@1
#    displayName: 'Setup VS Vars'
#    inputs:
#      filename: '"c:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat"'
#      modifyEnvironment: true
#
#  - task: CMake@1
#    displayName: 'Running cmake'
#    inputs:
#      workingDirectory: 'build_ninja'
#      cmakeArgs: '.. -GNinja -DCMAKE_C_INCLUDE_WHAT_YOU_USE:UNINITIALIZED=include-what-you-use;-Xiwyu;--mapping_file=../deps/c-build-tools/iwyu/rules.imp;--driver-mode=cl -DCMAKE_CXX_INCLUDE_WHAT_YOU_USE:UNINITIALIZED=include-what-you-use;-Xiwyu;--mapping_file=../deps/c-build-tools/iwyu/rules.imp;--driver-mode=cl -Drun_unittests:bool=ON -Drun_int_tests:bool=ON -Drun_perf_tests:bool=ON -Duse_cppunittest:bool=ON'
#
#  - task: PowerShell@2
#    displayName: 'Build solution and check includes'
#    inputs:
#      workingDirectory: 'build_ninja'
#      targetType: 'inline'
#      script: |
#          cmake --build . | tee build.log
#          if ((Select-String -Path "./build.log" -Pattern "Warning:") -ne $null) { throw "include check failed" }

- job: includecheck_linux
  pool:
    name: Azure-MessagingStore-LinuxBuildMachinePool
    demands:
      - linux

  steps:
  - bash: |
     pushd $(Build.Repository.LocalPath)
     git submodule update --init
     git submodule foreach --recursive "git clean -xdff"
     git clean -xdff
     popd
    workingDirectory: '$(Build.Repository.LocalPath)'
    displayName: 'git submodule update and clean'

  - task: Bash@3
    displayName: 'Build with iwyu'
    inputs:
      targetType: filePath
      filePath: './build/linux/build_linux_iwyu.sh'
      arguments: '$(Build.Repository.LocalPath)'
      workingDirectory: '$(Build.Repository.LocalPath)'

